{"name":"K8s0","tagline":"k8s simply study","body":"`kubernetes的简单学习：`      \r\n\r\n　　　kubernetes也是一个进行对docker集群的管理，和swarm的功能基本类似，但是kubernetes本身的功能又有\r\n很多服务发现呀[etcd]，自动化扩容缩容的解决[赋值因子]等．在这里就显得kubernetes比较的重．       \r\n\r\n相关对象定义：       \r\n======\r\n　　　pod:我的理解是一组容器［比如一个web系统包括server容器，数据库容器等］     \r\n　　　service:是对pod的抽象，可以这样理解有可能pod的ip经常的变化，为了使得上游的变化对使用者是透明的\r\n则进行对pod的统一来代理．\r\n　　　replicationController:是对pod的复制抽象，用于解决pod的扩容缩容问题。分布式应用为了性能或高可用\r\n性的考虑，需要复制多份资源，并且根据负载情况动态伸缩．    \r\n　　　label:由于replicationController以及service都是和pod相关联的，则label就是用来标记他们是一组的．   \r\n\r\n\r\n组件分类：    \r\n　　　master组件：   \r\n　\r\n    apiserver：封装了对核心对象的增删改查restful　api。其操作对象是：pod,service,replicationController.并持\r\n久化到etcd（一个分布式强一致性的key/value存储）.     \r\n    scheduler：负责集群的资源调度，为新建的pod分配机器［如新启动的容器在哪一台机器上］.    \r\n    controller-manager：负责执行各种控制器，目前有两类：    \r\n        endpoint-controller：定期关联service和pod，保证service到pod的映射总是最新的.        \r\n        replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量\r\n与实际运行pod的数量总是一致的.     \r\n\r\n\r\n　　　slave组件：        \r\n\r\n    kubelet：负责管控docker容器，如启动/停止、监控运行状态等。它会定期从etcd获取分配到本机的pod，并根据pod信息\r\n启动或停止相应的容器。同时，它也会接收apiserver的HTTP请求，汇报pod的运行状态.            \r\n    proxy：负责为pod提供代理。它会定期从etcd获取所有的service，并根据service信息创建代理。当某个客户pod要访问其\r\n他pod时，访问请求会经过本机proxy做转发。［相当于对调用者透明上游的变化］.\r\n\r\n\r\n下面内容来自[天外有菌博客](http://blog.csdn.net/zhangjun2915/article/details/40598151)  \r\n\r\nkubernetes的搭建：\r\n=======\r\n\r\n搭建环境\r\n\r\n* 第一步，我们需要Kuberntes各组件的二进制可执行文件。有以下两种方式获取：\r\n\r\n    下载源代码自己编译：\r\n```\r\n    git clone https://github.com/GoogleCloudPlatform/kubernetes.git  \r\n    cd kubernetes/build  \r\n    ./release.sh  \r\n```\r\n\r\n直接下载人家已经编译打包好的tar文件：\r\n\r\n\r\n    wget https://storage.googleapis.com/kubernetes/binaries.tar.gz  \r\n\r\n\r\n自己编译源码需要先安装好golang，编译完之后在kubernetes/_output/release-tars文件夹下可以得到打包文件。直接下载的方式不需要安装其他软件，但可能得不到最新的版本。\r\n\r\n* 第二步，我们还需要etcd的二进制可执行文件，通过如下方式获取：\r\n\r\n```\r\n    wget https://github.com/coreos/etcd/releases/download/v0.4.6/etcd-v0.4.6-linux-amd64.tar.gz  \r\n    tar xvf etcd-v0.4.6-linux-amd64.tar.gz  \r\n```\r\n\r\n* 第三步，就可以启动各个组件了：\r\n * etcd\r\n```\r\n    cd etcd-v0.4.6-linux-amd64  \r\n    ./etcd  \r\n```\r\n * apiserver\r\n```\r\n    ./apiserver \\  \r\n    -address=127.0.0.1 \\  \r\n    -port=8080 \\  \r\n    -portal_net=\"172.0.0.0/16\" \\  \r\n    -etcd_servers=http://127.0.0.1:4001 \\  \r\n    -machines=127.0.0.1 \\  \r\n    -v=3 \\  \r\n    -logtostderr=false \\  \r\n    -log_dir=./log  \r\n```\r\n * scheduler\r\n```\r\n    ./scheduler -master 127.0.0.1:8080 \\  \r\n    -v=3 \\  \r\n    -logtostderr=false \\  \r\n    -log_dir=./log  \r\n```\r\n\r\n * controller-manager\r\n```\r\n    ./controller-manager -master 127.0.0.1:8080 \\  \r\n    -v=3 \\  \r\n    -logtostderr=false \\  \r\n    -log_dir=./log  \r\n```\r\n* kubelet\r\n\r\n```\r\n    ./kubelet \\  \r\n    -address=127.0.0.1 \\  \r\n    -port=10250 \\  \r\n    -hostname_override=127.0.0.1 \\  \r\n    -etcd_servers=http://127.0.0.1:4001 \\  \r\n    -v=3 \\  \r\n    -logtostderr=false \\  \r\n    -log_dir=./log  \r\n```\r\n\r\n创建pod\r\n搭好了运行环境后，就可以提交pod了。首先编写pod描述文件，保存为redis.json：\r\n```\r\n\r\n    {  \r\n      \"id\": \"redis\",  \r\n      \"desiredState\": {  \r\n        \"manifest\": {  \r\n          \"version\": \"v1beta1\",  \r\n          \"id\": \"redis\",  \r\n          \"containers\": [{  \r\n            \"name\": \"redis\",  \r\n            \"image\": \"dockerfile/redis\",  \r\n            \"imagePullPolicy\": \"PullIfNotPresent\",  \r\n            \"ports\": [{  \r\n              \"containerPort\": 6379,  \r\n              \"hostPort\": 6379  \r\n            }]  \r\n          }]  \r\n        }  \r\n      },  \r\n      \"labels\": {  \r\n        \"name\": \"redis\"  \r\n      }  \r\n    }  \r\n```\r\n然后，通过命令行工具kubecfg提交：\r\n\r\n\r\n    ./kubecfg -c redis.json create /pods  \r\n\r\n提交完后，通过kubecfg查看pod状态：\r\n```\r\n    # ./kubecfg list /pods  \r\n    ID                  Image(s)            Host                Labels              Status  \r\n    ----------          ----------          ----------          ----------          ----------  \r\n    redis               dockerfile/redis    127.0.0.1/          name=redis          Running  \r\n```\r\n\r\nStatus是Running表示pod已经在容器里运行起来了，可以用\"docker ps\"命令来查看容器信息:\r\n```\r\n    # docker ps  \r\n    CONTAINER ID        IMAGE                     COMMAND                CREATED             STATUS              PORTS                    NAMES  \r\n    ae83d1e4b1ec        dockerfile/redis:latest   \"redis-server /etc/r   19 seconds ago      Up 19 seconds                                k8s_redis.caa18858_redis.default.etcd_1414684622_1b43fe35  \r\n```\r\n\r\n创建replicationController\r\n```\r\n    {  \r\n        \"id\": \"redisController\",  \r\n        \"apiVersion\": \"v1beta1\",  \r\n        \"kind\": \"ReplicationController\",  \r\n        \"desiredState\": {  \r\n          \"replicas\": 1,  \r\n          \"replicaSelector\": {\"name\": \"redis\"},  \r\n          \"podTemplate\": {  \r\n            \"desiredState\": {  \r\n               \"manifest\": {  \r\n                 \"version\": \"v1beta1\",  \r\n                 \"id\": \"redisController\",  \r\n                 \"containers\": [{  \r\n                   \"name\": \"redis\",  \r\n                   \"image\": \"dockerfile/redis\",  \r\n                   \"imagePullPolicy\": \"PullIfNotPresent\",  \r\n                   \"ports\": [{  \r\n                       \"containerPort\": 6379,  \r\n                       \"hostPort\": 6379  \r\n                   }]  \r\n                 }]  \r\n               }  \r\n             },  \r\n             \"labels\": {\"name\": \"redis\"}  \r\n            }},  \r\n        \"labels\": {\"name\": \"redis\"}  \r\n      }  \r\n\r\n```\r\n然后，通过命令行工具kubecfg提交：\r\n```\r\n    ./kubecfg -c redisController.json create /replicationControllers   \r\n```\r\n\r\n提交完后，通过kubecfg查看replicationController状态：\r\n\r\n```\r\n    # ./kubecfg list /replicationControllers  \r\n    ID                  Image(s)            Selector            Replicas  \r\n    ----------          ----------          ----------          ----------  \r\n    redisController     dockerfile/redis    name=redis          1  \r\n```\r\n\r\n同时，1个pod也将被自动创建出来，即使我们故意删除该pod，replicationController也将保证创建1个新pod。\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"k8s simply study","note":"Don't delete this file! It's used internally to help with page regeneration."}